!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);var n={};function i(e){return s(e)||u(e)||a(e)||o()}function o(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function a(e,t){if(e){if("string"==typeof e)return l(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?l(e,t):void 0}}function u(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}function s(e){if(Array.isArray(e))return l(e)}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function d(e,t,r){return t&&c(e.prototype,t),r&&c(e,r),e}function h(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function y(e,t,r){var n=t.get(e);if(!n)throw new TypeError("attempted to set private field on non-instance");if(n.set)n.set.call(e,r);else{if(!n.writable)throw new TypeError("attempted to set read only private field");n.value=r}return r}function p(e,t){var r=t.get(e);if(!r)throw new TypeError("attempted to get private field on non-instance");return r.get?r.get.call(e):r.value}r.r(n),r.d(n,"getDifference",(function(){return L})),r.d(n,"waitSomeTime",(function(){return T})),r.d(n,"initSharedGrid",(function(){return j})),r.d(n,"calcNextState",(function(){return O}));var v=function(){function e(){f(this,e),g.set(this,{writable:!0,value:void 0}),b.set(this,{writable:!0,value:void 0}),m.set(this,{writable:!0,value:void 0}),w.set(this,{writable:!0,value:void 0}),A.set(this,{writable:!0,value:void 0})}return d(e,[{key:"initSharedGrid",value:function(e,t,r,n,i){if(!(e instanceof SharedArrayBuffer&&t instanceof SharedArrayBuffer&&r instanceof SharedArrayBuffer))throw new TypeError("SharedGrid.constructor requires instance of SharedArrayBuffer as first, second and third argument");y(this,w,n),y(this,A,i),y(this,g,new Int8Array(e)),y(this,b,new Int8Array(t)),y(this,m,new Int8Array(r))}},{key:"gridToWrite",value:function(){return Atomics.load(p(this,m),0)?p(this,b):p(this,g)}},{key:"gridToDisplay",value:function(){return Atomics.load(p(this,m),0)?p(this,g):p(this,b)}},{key:"clearGrid",value:function(t){for(var r=0;r<p(this,w);r++)for(var n=0;n<p(this,A);n++)this.setCell(t,r,n,e.DEAD_CELL)}},{key:"getCell",value:function(e,t,r){if(!(e instanceof Int8Array))throw new TypeError("SharedGrid.getCell requires Int8Array as first argument");var n=t>=p(this,w)?0:t<0?p(this,w)-1:t,i=r>=p(this,A)?0:r<0?p(this,A)-1:r;return Atomics.load(e,n*p(this,A)+i)}},{key:"setCell",value:function(e,t,r,n){if(!(e instanceof Int8Array))throw new TypeError("SharedGrid.getCell requires Int8Array as first argument");Atomics.exchange(e,t*p(this,A)+r,n)}},{key:"getCoords",value:function(e){if(e<p(this,A)*p(this,w)){var t=Math.floor(e/p(this,A));return[t,e-t*p(this,A)]}return[0,0]}},{key:"getArrayCell",value:function(e,t){return this.getCell.apply(this,[e].concat(i(this.getCoords(t))))}},{key:"setArrayCell",value:function(e,t,r){this.setCell.apply(this,[e].concat(i(this.getCoords(t)),[r]))}},{key:"getNeighbors",value:function(e,t){for(var r=[],n=-1;n<2;n++)for(var i=-1;i<2;i++)r.push(this.getCell(this.gridToDisplay(),e+n,t+i));return r}},{key:"setNextArrayCellState",value:function(e){this.setNextCellState.apply(this,i(this.getCoords(e)))}},{key:"setNextCellState",value:function(t,r){var n=this.getCell(this.gridToDisplay(),t,r),i=this.getNeighbors(t,r),o=0;i.forEach((function(t){t===e.ALIVE_CELL&&o++}));var a=3===o||n===e.ALIVE_CELL&&2===o?e.ALIVE_CELL:e.DEAD_CELL;this.setCell(this.gridToWrite(),t,r,a)}},{key:"height",get:function(){return p(this,w)}},{key:"width",get:function(){return p(this,A)}}]),e}(),g=new WeakMap,b=new WeakMap,m=new WeakMap,w=new WeakMap,A=new WeakMap;h(v,"DEAD_CELL",0),h(v,"ALIVE_CELL",1);var S=arguments;function C(e){throw new Error('"'+e+'" is read-only')}var E=new v,k=function(e){if(S.length<1)throw new TypeError("reply - takes at least one argument");for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];self.postMessage({queryMethodListener:e,queryMethodArguments:r})},L=function(e,t){k("printStuff",e-t)},T=function(){setTimeout((function(){k("doAlert",3,"seconds")}),3e3)},j=function(e,t,r,n,i){E.initSharedGrid(e,t,r,n,i),k("printStuff","Shared Grid init done")},O=function(e,t,r){C("sharedGrid"),E=new v(e,t,r)};function I(e){return D(e)||x(e)||_(e)||M()}function M(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _(e,t){if(e){if("string"==typeof e)return q(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?q(e,t):void 0}}function x(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}function D(e){if(Array.isArray(e))return q(e)}function q(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var G=function(e){console.log(e)};self.onmessage=function(e){if(e.data instanceof Object&&e.data.hasOwnProperty("queryMethod")&&e.data.hasOwnProperty("queryArguments")){var t=e.data,r=t.queryMethod,i=t.queryArguments;n[r]&&n[r].apply(n,I(i))}else G(e.data)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,