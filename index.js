!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=8)}([function(e,t,r){"use strict";(function(e){function n(e){return function(e){if(Array.isArray(e))return i(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function o(e,t){var r=t.get(e);if(!r)throw new TypeError("attempted to get private field on non-instance");return r.get?r.get.call(e):r.value}r.d(t,"a",(function(){return s}));var s=function(){function t(r,i){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),l.set(this,{writable:!0,value:new Worker(e,{type:void 0,globalObject:!1})}),u.set(this,{writable:!0,value:{}}),c.set(this,{writable:!0,value:function(e){console.log(e)}}),function(e,t,r){var n=t.get(e);if(!n)throw new TypeError("attempted to set private field on non-instance");if(n.set)n.set.call(e,r);else{if(!n.writable)throw new TypeError("attempted to set read only private field");n.value=r}}(this,c,"function"==typeof r?r:function(){}),i&&(o(this,l).onerror=i),o(this,l).onmessage=function(e){if(e.data instanceof Object&&e.data.hasOwnProperty("queryMethodListener")&&e.data.hasOwnProperty("queryMethodArguments")){var t,r=e.data,i=r.queryMethodListener,s=r.queryMethodArguments;o(a,u)[i]&&(t=o(a,u))[i].apply(t,n(s))}else o(a,c).call(a,e.data)}}var r,i,s;return r=t,(i=[{key:"postMessage",value:function(e){o(this,l).postMessage(e)}},{key:"addListener",value:function(e,t){o(this,u)[e]=t}},{key:"removeListener",value:function(e){delete o(this,u)[e]}},{key:"sendQuery",value:function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];if(arguments.length<1)throw new TypeError("QuerableWorker.sendQuery takes at least one argument");this.postMessage({queryMethod:e,queryArguments:r})}},{key:"destroyWorker",value:function(){o(this,l).terminate()}}])&&a(r.prototype,i),s&&a(r,s),t}(),l=new WeakMap,u=new WeakMap,c=new WeakMap}).call(this,r(7))},function(e,t,r){"use strict";var n,i=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},a=function(){var e={};return function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[t]=r}return e[t]}}(),o=[];function s(e){for(var t=-1,r=0;r<o.length;r++)if(o[r].identifier===e){t=r;break}return t}function l(e,t){for(var r={},n=[],i=0;i<e.length;i++){var a=e[i],l=t.base?a[0]+t.base:a[0],u=r[l]||0,c="".concat(l," ").concat(u);r[l]=u+1;var f=s(c),h={css:a[1],media:a[2],sourceMap:a[3]};-1!==f?(o[f].references++,o[f].updater(h)):o.push({identifier:c,updater:y(h,t),references:1}),n.push(c)}return n}function u(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var i=r.nc;i&&(n.nonce=i)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var c,f=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function h(e,t,r,n){var i=r?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=f(t,i);else{var a=document.createTextNode(i),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(a,o[t]):e.appendChild(a)}}function d(e,t,r){var n=r.css,i=r.media,a=r.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),a&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var p=null,v=0;function y(e,t){var r,n,i;if(t.singleton){var a=v++;r=p||(p=u(t)),n=h.bind(null,r,a,!1),i=h.bind(null,r,a,!0)}else r=u(t),n=d.bind(null,r,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var r=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<r.length;n++){var i=s(r[n]);o[i].references--}for(var a=l(e,t),u=0;u<r.length;u++){var c=s(r[u]);0===o[c].references&&(o[c].updater(),o.splice(c,1))}r=a}}}},function(e,t,r){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=function(e,t){var r=e[1]||"",n=e[3];if(!n)return r;if(t&&"function"==typeof btoa){var i=(o=n,s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[r].concat(a).concat([i]).join("\n")}var o,s,l;return[r].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,n){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(n)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(i[o]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);n&&i[l[0]]||(r&&(l[2]?l[2]="".concat(r," and ").concat(l[2]):l[2]=r),t.push(l))}},t}},function(e,t,r){var n=r(1),i=r(4);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var a={insert:"head",singleton:!1};n(i,a);e.exports=i.locals||{}},function(e,t,r){(t=r(2)(!1)).push([e.i,"body #canvas{border:black 1px solid}\n",""]),e.exports=t},function(e,t,r){var n=r(1),i=r(6);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var a={insert:"head",singleton:!1};n(i,a);e.exports=i.locals||{}},function(e,t,r){(t=r(2)(!1)).push([e.i,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}",""]),e.exports=t},function(e,t,r){e.exports=r.p+"0.index.worker.js"},function(e,t,r){"use strict";r.r(t);r(3),r(5);var n=r(0);function i(e){return function(e){if(Array.isArray(e))return a(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return a(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t,r){var n=t.get(e);if(!n)throw new TypeError("attempted to set private field on non-instance");if(n.set)n.set.call(e,r);else{if(!n.writable)throw new TypeError("attempted to set read only private field");n.value=r}return r}function u(e,t){var r=t.get(e);if(!r)throw new TypeError("attempted to get private field on non-instance");return r.get?r.get.call(e):r.value}var c=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),f.set(this,{writable:!0,value:void 0}),h.set(this,{writable:!0,value:void 0}),d.set(this,{writable:!0,value:void 0}),p.set(this,{writable:!0,value:void 0}),v.set(this,{writable:!0,value:void 0})}var t,r,n;return t=e,(r=[{key:"initSharedGrid",value:function(e,t,r,n,i){if(!(e instanceof SharedArrayBuffer&&t instanceof SharedArrayBuffer&&r instanceof SharedArrayBuffer))throw new TypeError("SharedGrid.constructor requires instance of SharedArrayBuffer as first, second and third argument");l(this,p,n),l(this,v,i),l(this,f,new Int8Array(e)),l(this,h,new Int8Array(t)),l(this,d,new Int8Array(r))}},{key:"gridToWrite",value:function(){return Atomics.load(u(this,d),0)?u(this,h):u(this,f)}},{key:"gridToDisplay",value:function(){return Atomics.load(u(this,d),0)?u(this,f):u(this,h)}},{key:"clearGrid",value:function(t){for(var r=0;r<u(this,p);r++)for(var n=0;n<u(this,v);n++)this.setCell(t,r,n,e.DEAD_CELL)}},{key:"getCell",value:function(e,t,r){if(!(e instanceof Int8Array))throw new TypeError("SharedGrid.getCell requires Int8Array as first argument");var n=t>=u(this,p)?0:t<0?u(this,p)-1:t,i=r>=u(this,v)?0:r<0?u(this,v)-1:r;return Atomics.load(e,n*u(this,v)+i)}},{key:"setCell",value:function(e,t,r,n){if(!(e instanceof Int8Array))throw new TypeError("SharedGrid.getCell requires Int8Array as first argument");Atomics.exchange(e,t*u(this,v)+r,n)}},{key:"getCoords",value:function(e){if(e<u(this,v)*u(this,p)){var t=Math.floor(e/u(this,v));return[t,e-t*u(this,v)]}return[0,0]}},{key:"getArrayCell",value:function(e,t){return this.getCell.apply(this,[e].concat(i(this.getCoords(t))))}},{key:"setArrayCell",value:function(e,t,r){this.setCell.apply(this,[e].concat(i(this.getCoords(t)),[r]))}},{key:"getNeighbors",value:function(e,t){for(var r=[],n=-1;n<2;n++)for(var i=-1;i<2;i++)0===n&&0===i||r.push(this.getCell(this.gridToDisplay(),e+n,t+i));return r}},{key:"setNextArrayCellState",value:function(e){this.setNextCellState.apply(this,i(this.getCoords(e)))}},{key:"setNextCellState",value:function(t,r){var n=this.getCell(this.gridToDisplay(),t,r),i=this.getNeighbors(t,r),a=0;i.forEach((function(t){t===e.ALIVE_CELL&&a++}));var o=3===a||n===e.ALIVE_CELL&&2===a?e.ALIVE_CELL:e.DEAD_CELL;this.setCell(this.gridToWrite(),t,r,o)}},{key:"setNextShareState",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:u(this,p)*u(this,v);if("number"!=typeof e||"number"!=typeof t||e<0||t<0)throw new TypeError("SharedGrid.setNextShareState should be run with no arguments or with two positive integers");if(e>t){var r=[t,e];e=r[0],t=r[1]}for(var n=e;n<t;n++)this.setNextArrayCellState(n)}},{key:"height",get:function(){return u(this,p)}},{key:"width",get:function(){return u(this,v)}}])&&o(t.prototype,r),n&&o(t,n),e}(),f=new WeakMap,h=new WeakMap,d=new WeakMap,p=new WeakMap,v=new WeakMap;function y(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function g(e,t){var r=t.get(e);if(!r)throw new TypeError("attempted to get private field on non-instance");return r.get?r.get.call(e):r.value}function w(e,t,r){var n=t.get(e);if(!n)throw new TypeError("attempted to set private field on non-instance");if(n.set)n.set.call(e,r);else{if(!n.writable)throw new TypeError("attempted to set read only private field");n.value=r}return r}s(c,"DEAD_CELL",0),s(c,"ALIVE_CELL",1);var b=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),m.set(this,{writable:!0,value:window.navigator.hardwareConcurrency-1}),k.set(this,{writable:!0,value:[]}),A.set(this,{writable:!0,value:void 0}),C.set(this,{writable:!0,value:void 0}),S.set(this,{writable:!0,value:void 0}),E.set(this,{writable:!0,value:void 0}),L.set(this,{writable:!0,value:void 0}),T.set(this,{writable:!0,value:0}),w(this,S,new SharedArrayBuffer(t*r)),w(this,E,new SharedArrayBuffer(t*r)),w(this,L,new SharedArrayBuffer(1)),w(this,A,new c),g(this,A).initSharedGrid(g(this,S),g(this,E),g(this,L),t,r),w(this,C,new Int8Array(g(this,L))),Atomics.exchange(g(this,C),0,0)}var t,r,i;return t=e,(r=[{key:"destroyWebWorkers",value:function(){for(var e=0;e<g(this,m);e++)g(this,k)[e].destroyWorker()}},{key:"initWebWorkers",value:function(){for(var e=0;e<g(this,m);e++)g(this,k).push(new n.a),g(this,k)[e].addListener("printStuff",(function(e){return console.log(e)})),g(this,k)[e].sendQuery("initSharedGrid",g(this,S),g(this,E),g(this,L),g(this,A).height,g(this,A).width)}},{key:"scatterQuery",value:function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];for(var i=0;i<g(this,m);i++){var a;(a=g(this,k)[i]).sendQuery.apply(a,[e].concat(r))}}},{key:"scatterListener",value:function(e,t){for(var r=0;r<g(this,m);r++)g(this,k)[r].addListener(e,t)}},{key:"getCellToDisplay",value:function(e,t){return g(this,A).getCell(g(this,A).gridToDisplay(),e,t)}},{key:"toggleCellToDisplay",value:function(e,t){var r=g(this,A).gridToDisplay();g(this,A).setCell(r,e,t,g(this,A).getCell(r,e,t)===c.DEAD_CELL?c.ALIVE_CELL:c.DEAD_CELL)}},{key:"toggleDisplayFlag",value:function(){var e=Atomics.load(g(this,C),0);Atomics.exchange(g(this,C),0,e?0:1)}},{key:"calcNextState",value:function(){g(this,A).setNextShareState(),this.toggleDisplayFlag()}},{key:"calcNextStateParallel",value:function(){for(var e=g(this,A).height*g(this,A).width,t=e%g(this,m),r=Math.floor(e/g(this,m)),n=g(this,m)-t,i=0;i<n;i++)g(this,k)[i].sendQuery("setNextShareState",i*r,(i+1)*r);for(var a=r*n,o=n;o<g(this,m);o++)g(this,k)[o].sendQuery("setNextShareState",a+(o-n)*(r+1),a+(o-n+1)*(r+1))}},{key:"clearDisplaySharedGrid",value:function(){g(this,A).clearGrid(g(this,A).gridToDisplay())}},{key:"incrGridAnswer",value:function(){return w(this,T,+g(this,T)+1)>=g(this,m)&&(w(this,T,0),!0)}}])&&y(t.prototype,r),i&&y(t,i),e}(),m=new WeakMap,k=new WeakMap,A=new WeakMap,C=new WeakMap,S=new WeakMap,E=new WeakMap,L=new WeakMap,T=new WeakMap;function M(e){return function(e){if(Array.isArray(e))return W(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return W(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return W(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function W(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function I(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function j(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function x(e,t){var r=t.get(e);if(!r)throw new TypeError("attempted to get private field on non-instance");return r.get?r.get.call(e):r.value}function D(e,t,r){var n=t.get(e);if(!n)throw new TypeError("attempted to set private field on non-instance");if(n.set)n.set.call(e,r);else{if(!n.writable)throw new TypeError("attempted to set read only private field");n.value=r}return r}var O=function(){function e(t,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),_.set(this,{writable:!0,value:void 0}),q.set(this,{writable:!0,value:void 0}),P.set(this,{writable:!0,value:void 0}),N.set(this,{writable:!0,value:void 0}),G.set(this,{writable:!0,value:void 0}),D(this,_,document.querySelector(t)),D(this,q,x(this,_).getContext("2d")),this.setGrid(r,n)}var t,r,n;return t=e,(r=[{key:"getParentWidth",value:function(){return x(this,_).parentElement.clientWidth}},{key:"setGrid",value:function(e,t){D(this,P,e),D(this,N,t),this.setSize()}},{key:"getHeight",value:function(){return x(this,_).scrollHeight}},{key:"getWidth",value:function(){return x(this,_).scrollWidth}},{key:"setSize",value:function(){D(this,G,this.getParentWidth()/x(this,N)),x(this,_).width=this.getParentWidth(),x(this,_).height=x(this,G)*x(this,P)}},{key:"cellToCords",value:function(e,t){return[t*x(this,G),e*x(this,G)]}},{key:"cordsToCell",value:function(e,t){return[Math.floor(t/x(this,G)),Math.floor(e/x(this,G))]}},{key:"drawBorder",value:function(t,r,n){var i;x(this,q).beginPath(),x(this,q).lineWidth=function(e,t,r){if(e!==t)throw new TypeError("Private static access of wrong provenance");return r.get?r.get.call(e):r.value}(e,e,H),x(this,q).strokeStyle=n,(i=x(this,q)).rect.apply(i,M(this.cellToCords(t,r)).concat([x(this,G),x(this,G)])),x(this,q).stroke()}},{key:"fillCell",value:function(t,r){var n,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.ALIVE_CELL_FILL,a=this.cellToCords(t,r);a[0]+=1,a[1]+=1,x(this,q).fillStyle=i,(n=x(this,q)).fillRect.apply(n,M(a).concat([x(this,G)-2,x(this,G)-2]))}},{key:"fillCellAlive",value:function(t,r){var n,i=this.cellToCords(t,r);x(this,q).fillStyle=e.ALIVE_CELL_FILL,(n=x(this,q)).fillRect.apply(n,M(i).concat([x(this,G),x(this,G)]))}},{key:"fillCellDead",value:function(t,r){var n,i=this.cellToCords(t,r);x(this,q).fillStyle=e.DEAD_CELL_FILL,(n=x(this,q)).fillRect.apply(n,M(i).concat([x(this,G),x(this,G)])),this.drawBorder(t,r,e.ALIVE_CELL_FILL)}},{key:"canvas",get:function(){return x(this,_)}}])&&I(t.prototype,r),n&&I(t,n),e}(),_=new WeakMap,q=new WeakMap,P=new WeakMap,N=new WeakMap,G=new WeakMap;j(O,"DEAD_CELL_FILL","white"),j(O,"ALIVE_CELL_FILL","black");var H={writable:!0,value:"1"};function B(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function F(e,t,r){if(e!==t)throw new TypeError("Private static access of wrong provenance");return r.get?r.get.call(e):r.value}function V(e,t){var r=t.get(e);if(!r)throw new TypeError("attempted to get private field on non-instance");return r.get?r.get.call(e):r.value}function R(e,t,r){var n=t.get(e);if(!n)throw new TypeError("attempted to set private field on non-instance");if(n.set)n.set.call(e,r);else{if(!n.writable)throw new TypeError("attempted to set read only private field");n.value=r}return r}var U=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),Q.set(this,{writable:!0,value:void 0}),z.set(this,{writable:!0,value:void 0}),R(this,Q,document.querySelector(t)),R(this,z,document.querySelector(r)),V(this,Q).value=F(e,e,$),V(this,z).value=F(e,e,J),V(this,Q).oninput=this.handleChange(V(this,Q)),V(this,z).oninput=this.handleChange(V(this,z))}var t,r,n;return t=e,(r=[{key:"handleChange",value:function(e){return function(){var e=new Event("gridChange");window.dispatchEvent(e)}}},{key:"gridHeight",get:function(){return V(this,Q).value?parseInt(V(this,Q).value)>V(this,Q).max?parseInt(V(this,Q).max):parseInt(V(this,Q).value)<V(this,Q).min?parseInt(V(this,Q).min):parseInt(V(this,Q).value):F(e,e,$)}},{key:"gridWidth",get:function(){return V(this,z).value?parseInt(V(this,z).value)>V(this,z).max?parseInt(V(this,z).max):parseInt(V(this,z).value)<V(this,z).min?parseInt(V(this,z).min):parseInt(V(this,z).value):F(e,e,J)}}])&&B(t.prototype,r),n&&B(t,n),e}(),Q=new WeakMap,z=new WeakMap,$={writable:!0,value:50},J={writable:!0,value:110};function X(e){return function(e){if(Array.isArray(e))return Y(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return Y(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return Y(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Y(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var K=document.querySelector(".button--start"),Z=document.querySelector(".button--clear"),ee=new U(".input--height > input",".input--width > input"),te=new O("#canvas",ee.gridHeight,ee.gridWidth),re=new b(ee.gridHeight,ee.gridWidth);re.initWebWorkers(),window.addEventListener("resize",(function(){te.setSize(),ne()}));var ne=function(){for(var e=0;e<ee.gridHeight;e++)for(var t=0;t<ee.gridWidth;t++)re.getCellToDisplay(e,t)===c.ALIVE_CELL?te.fillCellAlive(e,t):te.fillCellDead(e,t)};ne();var ie=!1;window.addEventListener("gridChange",(function(){ie&&(ie=!ie,clearTimeout(ae),K.innerHTML="Start"),re.destroyWebWorkers(),(re=new b(ee.gridHeight,ee.gridWidth)).initWebWorkers(),re.scatterListener("gridAnswer",(function(){re.incrGridAnswer()&&(re.toggleDisplayFlag(),window.dispatchEvent(oe))})),te.setGrid(ee.gridHeight,ee.gridWidth),ne()}));var ae,oe=new Event("rerender");window.addEventListener("rerender",(function(){ne()})),te.canvas.onmousedown=function(e){var t,r,n=e.offsetX,i=e.offsetY,a=te.cordsToCell(n,i);(t=re).getCellToDisplay.apply(t,X(a))===c.ALIVE_CELL?te.fillCellDead.apply(te,X(a)):te.fillCellAlive.apply(te,X(a)),(r=re).toggleCellToDisplay.apply(r,X(a))},re.scatterListener("gridAnswer",(function(){re.incrGridAnswer()&&(re.toggleDisplayFlag(),window.dispatchEvent(oe))}));K.onclick=function(){ie=!ie,K.innerHTML=ie?"Stop":"Start",ie?function e(){re.calcNextStateParallel(),ae=setTimeout(e,150)}():clearTimeout(ae)},Z.onclick=function(){re.clearDisplaySharedGrid(),ne()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,