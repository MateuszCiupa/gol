!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=8)}([function(e,t,r){"use strict";(function(e){function n(e){return function(e){if(Array.isArray(e))return i(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function o(e,t){var r=t.get(e);if(!r)throw new TypeError("attempted to get private field on non-instance");return r.get?r.get.call(e):r.value}r.d(t,"a",(function(){return s}));var s=function(){function t(r,i){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),l.set(this,{writable:!0,value:new Worker(e,{type:void 0,globalObject:!1})}),u.set(this,{writable:!0,value:{}}),c.set(this,{writable:!0,value:function(e){console.log(e)}}),function(e,t,r){var n=t.get(e);if(!n)throw new TypeError("attempted to set private field on non-instance");if(n.set)n.set.call(e,r);else{if(!n.writable)throw new TypeError("attempted to set read only private field");n.value=r}}(this,c,"function"==typeof r?r:function(){}),i&&(o(this,l).onerror=i),o(this,l).onmessage=function(e){if(e.data instanceof Object&&e.data.hasOwnProperty("queryMethodListener")&&e.data.hasOwnProperty("queryMethodArguments")){var t,r=e.data,i=r.queryMethodListener,s=r.queryMethodArguments;o(a,u)[i]&&(t=o(a,u))[i].apply(t,n(s))}else o(a,c).call(a,e.data)}}var r,i,s;return r=t,(i=[{key:"postMessage",value:function(e){o(this,l).postMessage(e)}},{key:"addListener",value:function(e,t){o(this,u)[e]=t}},{key:"removeListener",value:function(e){delete o(this,u)[e]}},{key:"sendQuery",value:function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];if(arguments.length<1)throw new TypeError("QuerableWorker.sendQuery takes at least one argument");this.postMessage({queryMethod:e,queryArguments:r})}}])&&a(r.prototype,i),s&&a(r,s),t}(),l=new WeakMap,u=new WeakMap,c=new WeakMap}).call(this,r(7))},function(e,t,r){"use strict";var n,i=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},a=function(){var e={};return function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[t]=r}return e[t]}}(),o=[];function s(e){for(var t=-1,r=0;r<o.length;r++)if(o[r].identifier===e){t=r;break}return t}function l(e,t){for(var r={},n=[],i=0;i<e.length;i++){var a=e[i],l=t.base?a[0]+t.base:a[0],u=r[l]||0,c="".concat(l," ").concat(u);r[l]=u+1;var f=s(c),h={css:a[1],media:a[2],sourceMap:a[3]};-1!==f?(o[f].references++,o[f].updater(h)):o.push({identifier:c,updater:y(h,t),references:1}),n.push(c)}return n}function u(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var i=r.nc;i&&(n.nonce=i)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var c,f=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function h(e,t,r,n){var i=r?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=f(t,i);else{var a=document.createTextNode(i),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(a,o[t]):e.appendChild(a)}}function d(e,t,r){var n=r.css,i=r.media,a=r.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),a&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var p=null,v=0;function y(e,t){var r,n,i;if(t.singleton){var a=v++;r=p||(p=u(t)),n=h.bind(null,r,a,!1),i=h.bind(null,r,a,!0)}else r=u(t),n=d.bind(null,r,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var r=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<r.length;n++){var i=s(r[n]);o[i].references--}for(var a=l(e,t),u=0;u<r.length;u++){var c=s(r[u]);0===o[c].references&&(o[c].updater(),o.splice(c,1))}r=a}}}},function(e,t,r){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=function(e,t){var r=e[1]||"",n=e[3];if(!n)return r;if(t&&"function"==typeof btoa){var i=(o=n,s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[r].concat(a).concat([i]).join("\n")}var o,s,l;return[r].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,n){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(n)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(i[o]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);n&&i[l[0]]||(r&&(l[2]?l[2]="".concat(r," and ").concat(l[2]):l[2]=r),t.push(l))}},t}},function(e,t,r){var n=r(1),i=r(4);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var a={insert:"head",singleton:!1};n(i,a);e.exports=i.locals||{}},function(e,t,r){(t=r(2)(!1)).push([e.i,"body #canvas{border:black 1px solid}\n",""]),e.exports=t},function(e,t,r){var n=r(1),i=r(6);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var a={insert:"head",singleton:!1};n(i,a);e.exports=i.locals||{}},function(e,t,r){(t=r(2)(!1)).push([e.i,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}",""]),e.exports=t},function(e,t,r){e.exports=r.p+"0.index.worker.js"},function(e,t,r){"use strict";r.r(t);r(3),r(5);var n=r(0);function i(e){return function(e){if(Array.isArray(e))return a(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return a(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t,r){var n=t.get(e);if(!n)throw new TypeError("attempted to set private field on non-instance");if(n.set)n.set.call(e,r);else{if(!n.writable)throw new TypeError("attempted to set read only private field");n.value=r}return r}function u(e,t){var r=t.get(e);if(!r)throw new TypeError("attempted to get private field on non-instance");return r.get?r.get.call(e):r.value}var c=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),f.set(this,{writable:!0,value:void 0}),h.set(this,{writable:!0,value:void 0}),d.set(this,{writable:!0,value:void 0}),p.set(this,{writable:!0,value:void 0}),v.set(this,{writable:!0,value:void 0})}var t,r,n;return t=e,(r=[{key:"initSharedGrid",value:function(e,t,r,n,i){if(!(e instanceof SharedArrayBuffer&&t instanceof SharedArrayBuffer&&r instanceof SharedArrayBuffer))throw new TypeError("SharedGrid.constructor requires instance of SharedArrayBuffer as first, second and third argument");l(this,p,n),l(this,v,i),l(this,f,new Int8Array(e)),l(this,h,new Int8Array(t)),l(this,d,new Int8Array(r))}},{key:"gridToWrite",value:function(){return Atomics.load(u(this,d),0)?u(this,h):u(this,f)}},{key:"gridToDisplay",value:function(){return Atomics.load(u(this,d),0)?u(this,f):u(this,h)}},{key:"clearGrid",value:function(t){for(var r=0;r<u(this,p);r++)for(var n=0;n<u(this,v);n++)this.setCell(t,r,n,e.DEAD_CELL)}},{key:"getCell",value:function(e,t,r){if(!(e instanceof Int8Array))throw new TypeError("SharedGrid.getCell requires Int8Array as first argument");var n=t>=u(this,p)?0:t<0?u(this,p)-1:t,i=r>=u(this,v)?0:r<0?u(this,v)-1:r;return Atomics.load(e,n*u(this,v)+i)}},{key:"setCell",value:function(e,t,r,n){if(!(e instanceof Int8Array))throw new TypeError("SharedGrid.getCell requires Int8Array as first argument");Atomics.exchange(e,t*u(this,v)+r,n)}},{key:"getCoords",value:function(e){if(e<u(this,v)*u(this,p)){var t=Math.floor(e/u(this,v));return[t,e-t*u(this,v)]}return[0,0]}},{key:"getArrayCell",value:function(e,t){return this.getCell.apply(this,[e].concat(i(this.getCoords(t))))}},{key:"setArrayCell",value:function(e,t,r){this.setCell.apply(this,[e].concat(i(this.getCoords(t)),[r]))}},{key:"getNeighbors",value:function(e,t){for(var r=[],n=-1;n<2;n++)for(var i=-1;i<2;i++)r.push(this.getCell(this.gridToDisplay(),e+n,t+i));return r}},{key:"setNextArrayCellState",value:function(e){this.setNextCellState.apply(this,i(this.getCoords(e)))}},{key:"setNextCellState",value:function(t,r){var n=this.getCell(this.gridToDisplay(),t,r),i=this.getNeighbors(t,r),a=0;i.forEach((function(t){t===e.ALIVE_CELL&&a++}));var o=3===a||n===e.ALIVE_CELL&&2===a?e.ALIVE_CELL:e.DEAD_CELL;this.setCell(this.gridToWrite(),t,r,o)}},{key:"height",get:function(){return u(this,p)}},{key:"width",get:function(){return u(this,v)}}])&&o(t.prototype,r),n&&o(t,n),e}(),f=new WeakMap,h=new WeakMap,d=new WeakMap,p=new WeakMap,v=new WeakMap;function y(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function b(e,t){var r=t.get(e);if(!r)throw new TypeError("attempted to get private field on non-instance");return r.get?r.get.call(e):r.value}function g(e,t,r){var n=t.get(e);if(!n)throw new TypeError("attempted to set private field on non-instance");if(n.set)n.set.call(e,r);else{if(!n.writable)throw new TypeError("attempted to set read only private field");n.value=r}return r}s(c,"DEAD_CELL",0),s(c,"ALIVE_CELL",1);var w=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),T.add(this),m.set(this,{writable:!0,value:window.navigator.hardwareConcurrency-1}),k.set(this,{writable:!0,value:[]}),A.set(this,{writable:!0,value:void 0}),C.set(this,{writable:!0,value:void 0}),E.set(this,{writable:!0,value:void 0}),L.set(this,{writable:!0,value:void 0}),S.set(this,{writable:!0,value:void 0}),g(this,E,new SharedArrayBuffer(t*r)),g(this,L,new SharedArrayBuffer(t*r)),g(this,S,new SharedArrayBuffer(1)),g(this,A,new c),b(this,A).initSharedGrid(b(this,E),b(this,L),b(this,S),t,r),g(this,C,new Int8Array(b(this,S))),Atomics.exchange(b(this,C),0,0)}var t,r,i;return t=e,(r=[{key:"initWebWorkers",value:function(){for(var e=0;e<b(this,m);e++)b(this,k).push(new n.a),b(this,k)[e].addListener("printStuff",(function(e){return console.log(e)})),b(this,k)[e].sendQuery("initSharedGrid",b(this,E),b(this,L),b(this,S),b(this,A).height,b(this,A).width)}},{key:"scatterQuery",value:function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];for(var i=0;i<b(this,m);i++){var a;(a=b(this,k)[i]).sendQuery.apply(a,[e].concat(r))}}},{key:"getCellToDisplay",value:function(e,t){return b(this,A).getCell(b(this,A).gridToDisplay(),e,t)}},{key:"toggleCellToDisplay",value:function(e,t){var r=b(this,A).gridToDisplay();b(this,A).setCell(r,e,t,b(this,A).getCell(r,e,t)===c.DEAD_CELL?c.ALIVE_CELL:c.DEAD_CELL)}}])&&y(t.prototype,r),i&&y(t,i),e}(),m=new WeakMap,k=new WeakMap,A=new WeakMap,C=new WeakMap,E=new WeakMap,L=new WeakMap,S=new WeakMap,T=new WeakSet;function M(e){return function(e){if(Array.isArray(e))return j(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return j(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return j(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function j(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function I(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function W(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function O(e,t){var r=t.get(e);if(!r)throw new TypeError("attempted to get private field on non-instance");return r.get?r.get.call(e):r.value}function _(e,t,r){var n=t.get(e);if(!n)throw new TypeError("attempted to set private field on non-instance");if(n.set)n.set.call(e,r);else{if(!n.writable)throw new TypeError("attempted to set read only private field");n.value=r}return r}var D=function(){function e(t,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),x.set(this,{writable:!0,value:void 0}),q.set(this,{writable:!0,value:void 0}),P.set(this,{writable:!0,value:void 0}),N.set(this,{writable:!0,value:void 0}),G.set(this,{writable:!0,value:void 0}),_(this,x,document.querySelector(t)),_(this,q,O(this,x).getContext("2d")),this.setGrid(r,n)}var t,r,n;return t=e,(r=[{key:"getParentWidth",value:function(){return O(this,x).parentElement.scrollWidth}},{key:"setGrid",value:function(e,t){_(this,P,e),_(this,N,t),this.setSize()}},{key:"getHeight",value:function(){return O(this,x).scrollHeight}},{key:"getWidth",value:function(){return O(this,x).scrollWidth}},{key:"setSize",value:function(){_(this,G,this.getParentWidth()/O(this,N)),O(this,x).width=this.getParentWidth(),O(this,x).height=O(this,G)*O(this,P)}},{key:"cellToCords",value:function(e,t){return[t*O(this,G),e*O(this,G)]}},{key:"cordsToCell",value:function(e,t){return[Math.floor(t/O(this,G)),Math.floor(e/O(this,G))]}},{key:"drawCell",value:function(t,r){var n;O(this,q).beginPath(),O(this,q).lineWidth=function(e,t,r){if(e!==t)throw new TypeError("Private static access of wrong provenance");return r.get?r.get.call(e):r.value}(e,e,B),(n=O(this,q)).rect.apply(n,M(this.cellToCords(t,r)).concat([O(this,G),O(this,G)])),O(this,q).stroke()}},{key:"drawGrid",value:function(){for(var e=0;e<O(this,P);e++)for(var t=0;t<O(this,N);t++)this.drawCell(e,t)}},{key:"fillCell",value:function(t,r){var n,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.ALIVE_CELL_FILL;O(this,q).fillStyle=i,(n=O(this,q)).fillRect.apply(n,M(this.cellToCords(t,r)).concat([O(this,G),O(this,G)]))}},{key:"canvas",get:function(){return O(this,x)}}])&&I(t.prototype,r),n&&I(t,n),e}(),x=new WeakMap,q=new WeakMap,P=new WeakMap,N=new WeakMap,G=new WeakMap;W(D,"DEAD_CELL_FILL","white"),W(D,"ALIVE_CELL_FILL","black");var B={writable:!0,value:"1"};function U(e){return function(e){if(Array.isArray(e))return V(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return V(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return V(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function V(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var F=new D("#canvas",8,10),R=new w(8,10);R.initWebWorkers(),window.addEventListener("resize",(function(){F.setSize(),Q()}));var Q=function(){F.drawGrid()};Q(),F.canvas.onmousedown=function(e){var t=e.offsetX,r=e.offsetY,n=F.cordsToCell(t,r),i=R.getCellToDisplay.apply(R,U(n));console.log(i),F.fillCell.apply(F,U(n).concat([i===c.DEAD_CELL?D.ALIVE_CELL_FILL:D.DEAD_CELL_FILL])),R.toggleCellToDisplay.apply(R,U(n))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvUXVlcnlhYmxlV29ya2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMvaW5kZXguc2Nzcz80YzM3Iiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMvaW5kZXguc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL3Jlc2V0LmNzcz80Y2ZiIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMvcmVzZXQuY3NzIiwid2VicGFjazovLy8uL3NyYy93b3JrZXJzL3dvcmtlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9TaGFyZWRHcmlkLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL1dvcmtlck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvQ2FudmFzLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlF1ZXJ5YWJsZVdvcmtlciIsImRlZmF1bHRMaXN0ZW5lciIsIm9uRXJyb3IiLCJXb3JrZXIiLCJ0eXBlIiwiZ2xvYmFsT2JqZWN0IiwibWVzc2FnZSIsImNvbnNvbGUiLCJsb2ciLCJ0aGlzIiwib25lcnJvciIsIm9ubWVzc2FnZSIsImV2ZW50IiwiZGF0YSIsInF1ZXJ5TWV0aG9kTGlzdGVuZXIiLCJxdWVyeU1ldGhvZEFyZ3VtZW50cyIsInBvc3RNZXNzYWdlIiwibGlzdGVuZXIiLCJxdWVyeU1ldGhvZCIsInF1ZXJ5QXJndW1lbnRzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiVHlwZUVycm9yIiwibWVtbyIsImlzT2xkSUUiLCJCb29sZWFuIiwid2luZG93IiwiZG9jdW1lbnQiLCJhbGwiLCJhdG9iIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwibGlzdCIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJpdGVtIiwiaWQiLCJiYXNlIiwiY291bnQiLCJjb25jYXQiLCJpbmRleCIsIm9iaiIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJwdXNoIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiam9pbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJidG9hIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJ0b1N0cmluZyIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4Iiwic3BsaWNlIiwidXNlU291cmNlTWFwIiwibWFwIiwiY29udGVudCIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwiYmFzZTY0Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiYXBpIiwiZGVmYXVsdCIsImxvY2FscyIsIl9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyIsIlNoYXJlZEdyaWQiLCJzaGFyZWRBcnJheUJ1ZmZlciIsInNoYXJlZEFycmF5QnVmZmVyVG1wIiwic2hhcmVkRGlzcGxheUZsYWciLCJoZWlnaHQiLCJ3aWR0aCIsIlNoYXJlZEFycmF5QnVmZmVyIiwiSW50OEFycmF5IiwiQXRvbWljcyIsImxvYWQiLCJncmlkIiwiaiIsInNldENlbGwiLCJERUFEX0NFTEwiLCJleGNoYW5nZSIsIngiLCJNYXRoIiwiZmxvb3IiLCJnZXRDZWxsIiwiZ2V0Q29vcmRzIiwibmVpZ2hib3JzIiwiYSIsImIiLCJncmlkVG9EaXNwbGF5Iiwic2V0TmV4dENlbGxTdGF0ZSIsImNlbGwiLCJnZXROZWlnaGJvcnMiLCJhbGl2ZSIsIkFMSVZFX0NFTEwiLCJncmlkVG9Xcml0ZSIsIldvcmtlck1hbmFnZXIiLCJuYXZpZ2F0b3IiLCJoYXJkd2FyZUNvbmN1cnJlbmN5IiwiaW5pdFNoYXJlZEdyaWQiLCJhZGRMaXN0ZW5lciIsInNlbmRRdWVyeSIsIkNhbnZhcyIsInF1ZXJ5U3RyaW5nIiwiZ3JpZEhlaWdodCIsImdyaWRXaWR0aCIsImdldENvbnRleHQiLCJzZXRHcmlkIiwicGFyZW50RWxlbWVudCIsInNjcm9sbFdpZHRoIiwic2V0U2l6ZSIsInNjcm9sbEhlaWdodCIsImdldFBhcmVudFdpZHRoIiwieSIsImJlZ2luUGF0aCIsImxpbmVXaWR0aCIsInJlY3QiLCJjZWxsVG9Db3JkcyIsInN0cm9rZSIsImRyYXdDZWxsIiwiZmlsbCIsIkFMSVZFX0NFTExfRklMTCIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiY2FudmFzIiwid29ya2VyTWFuYWdlciIsImluaXRXZWJXb3JrZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbmRlciIsImRyYXdHcmlkIiwib25tb3VzZWRvd24iLCJvZmZzZXRYIiwib2Zmc2V0WSIsImNvcmRzIiwiY29yZHNUb0NlbGwiLCJnZXRDZWxsVG9EaXNwbGF5IiwiZmlsbENlbGwiLCJERUFEX0NFTExfRklMTCIsInRvZ2dsZUNlbGxUb0Rpc3BsYXkiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxF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InNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA4KTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFF1ZXJ5YWJsZVdvcmtlciB7XG4gICN3b3JrZXIgPSBuZXcgV29ya2VyKFwiLi4vd29ya2Vycy93b3JrZXIuanNcIiwge1xuICAgIHR5cGU6IFwibW9kdWxlXCIsXG4gICAgZ2xvYmFsT2JqZWN0OiBmYWxzZSxcbiAgfSk7XG5cbiAgI2xpc3RlbmVycyA9IHt9O1xuICAjZGVmYXVsdExpc3RlbmVyID0gKG1lc3NhZ2UpID0+IHtcbiAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihkZWZhdWx0TGlzdGVuZXIsIG9uRXJyb3IpIHtcbiAgICB0aGlzLiNkZWZhdWx0TGlzdGVuZXIgPVxuICAgICAgdHlwZW9mIGRlZmF1bHRMaXN0ZW5lciA9PT0gXCJmdW5jdGlvblwiID8gZGVmYXVsdExpc3RlbmVyIDogKCkgPT4ge307XG5cbiAgICBpZiAob25FcnJvcikgdGhpcy4jd29ya2VyLm9uZXJyb3IgPSBvbkVycm9yO1xuXG4gICAgdGhpcy4jd29ya2VyLm9ubWVzc2FnZSA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICBldmVudC5kYXRhIGluc3RhbmNlb2YgT2JqZWN0ICYmXG4gICAgICAgIGV2ZW50LmRhdGEuaGFzT3duUHJvcGVydHkoXCJxdWVyeU1ldGhvZExpc3RlbmVyXCIpICYmXG4gICAgICAgIGV2ZW50LmRhdGEuaGFzT3duUHJvcGVydHkoXCJxdWVyeU1ldGhvZEFyZ3VtZW50c1wiKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IHsgcXVlcnlNZXRob2RMaXN0ZW5lciwgcXVlcnlNZXRob2RBcmd1bWVudHMgfSA9IGV2ZW50LmRhdGE7XG4gICAgICAgIHRoaXMuI2xpc3RlbmVyc1txdWVyeU1ldGhvZExpc3RlbmVyXSAmJlxuICAgICAgICAgIHRoaXMuI2xpc3RlbmVyc1txdWVyeU1ldGhvZExpc3RlbmVyXSguLi5xdWVyeU1ldGhvZEFyZ3VtZW50cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiNkZWZhdWx0TGlzdGVuZXIoZXZlbnQuZGF0YSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHBvc3RNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICB0aGlzLiN3b3JrZXIucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG4gIH1cblxuICBhZGRMaXN0ZW5lcihuYW1lLCBsaXN0ZW5lcikge1xuICAgIHRoaXMuI2xpc3RlbmVyc1tuYW1lXSA9IGxpc3RlbmVyO1xuICB9XG5cbiAgcmVtb3ZlTGlzdGVuZXIobmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLiNsaXN0ZW5lcnNbbmFtZV07XG4gIH1cblxuICBzZW5kUXVlcnkocXVlcnlNZXRob2QsIC4uLnF1ZXJ5QXJndW1lbnRzKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBcIlF1ZXJhYmxlV29ya2VyLnNlbmRRdWVyeSB0YWtlcyBhdCBsZWFzdCBvbmUgYXJndW1lbnRcIlxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgIHF1ZXJ5TWV0aG9kLFxuICAgICAgcXVlcnlBcmd1bWVudHMsXG4gICAgfSk7XG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImJvZHkgI2NhbnZhc3tib3JkZXI6YmxhY2sgMXB4IHNvbGlkfVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcmVzZXQuY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyogaHR0cDovL21leWVyd2ViLmNvbS9lcmljL3Rvb2xzL2Nzcy9yZXNldC8gXFxuICAgdjIuMCB8IDIwMTEwMTI2XFxuICAgTGljZW5zZTogbm9uZSAocHVibGljIGRvbWFpbilcXG4qL1xcblxcbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXFxuYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLFxcbmIsIHUsIGksIGNlbnRlcixcXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxcbmZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLCBcXG5maWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIFxcbm1lbnUsIG5hdiwgb3V0cHV0LCBydWJ5LCBzZWN0aW9uLCBzdW1tYXJ5LFxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XFxuXFx0bWFyZ2luOiAwO1xcblxcdHBhZGRpbmc6IDA7XFxuXFx0Ym9yZGVyOiAwO1xcblxcdGZvbnQtc2l6ZTogMTAwJTtcXG5cXHRmb250OiBpbmhlcml0O1xcblxcdHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXG59XFxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xcbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsIFxcbmZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvbiB7XFxuXFx0ZGlzcGxheTogYmxvY2s7XFxufVxcbmJvZHkge1xcblxcdGxpbmUtaGVpZ2h0OiAxO1xcbn1cXG5vbCwgdWwge1xcblxcdGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcbmJsb2NrcXVvdGUsIHEge1xcblxcdHF1b3Rlczogbm9uZTtcXG59XFxuYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsXFxucTpiZWZvcmUsIHE6YWZ0ZXIge1xcblxcdGNvbnRlbnQ6ICcnO1xcblxcdGNvbnRlbnQ6IG5vbmU7XFxufVxcbnRhYmxlIHtcXG5cXHRib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcblxcdGJvcmRlci1zcGFjaW5nOiAwO1xcbn1cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMC5pbmRleC53b3JrZXIuanNcIiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoYXJlZEdyaWQge1xuICBzdGF0aWMgREVBRF9DRUxMID0gMDtcbiAgc3RhdGljIEFMSVZFX0NFTEwgPSAxO1xuXG4gIC8vIHNoYXJlZCBhcnJheXNcbiAgI2dyaWQ7XG4gICNncmlkVG1wO1xuICAjaXNHcmlkRGlzcGxheWVkO1xuXG4gICNoZWlnaHQ7XG4gICN3aWR0aDtcblxuICBnZXQgaGVpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLiNoZWlnaHQ7XG4gIH1cblxuICBnZXQgd2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3dpZHRoO1xuICB9XG5cbiAgaW5pdFNoYXJlZEdyaWQoXG4gICAgc2hhcmVkQXJyYXlCdWZmZXIsXG4gICAgc2hhcmVkQXJyYXlCdWZmZXJUbXAsXG4gICAgc2hhcmVkRGlzcGxheUZsYWcsXG4gICAgaGVpZ2h0LFxuICAgIHdpZHRoXG4gICkge1xuICAgIGlmIChcbiAgICAgICEoXG4gICAgICAgIHNoYXJlZEFycmF5QnVmZmVyIGluc3RhbmNlb2YgU2hhcmVkQXJyYXlCdWZmZXIgJiZcbiAgICAgICAgc2hhcmVkQXJyYXlCdWZmZXJUbXAgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlciAmJlxuICAgICAgICBzaGFyZWREaXNwbGF5RmxhZyBpbnN0YW5jZW9mIFNoYXJlZEFycmF5QnVmZmVyXG4gICAgICApXG4gICAgKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgXCJTaGFyZWRHcmlkLmNvbnN0cnVjdG9yIHJlcXVpcmVzIGluc3RhbmNlIG9mIFNoYXJlZEFycmF5QnVmZmVyIGFzIGZpcnN0LCBzZWNvbmQgYW5kIHRoaXJkIGFyZ3VtZW50XCJcbiAgICAgICk7XG4gICAgdGhpcy4jaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHRoaXMuI3dpZHRoID0gd2lkdGg7XG4gICAgdGhpcy4jZ3JpZCA9IG5ldyBJbnQ4QXJyYXkoc2hhcmVkQXJyYXlCdWZmZXIpO1xuICAgIHRoaXMuI2dyaWRUbXAgPSBuZXcgSW50OEFycmF5KHNoYXJlZEFycmF5QnVmZmVyVG1wKTtcbiAgICB0aGlzLiNpc0dyaWREaXNwbGF5ZWQgPSBuZXcgSW50OEFycmF5KHNoYXJlZERpc3BsYXlGbGFnKTtcbiAgfVxuXG4gIGdyaWRUb1dyaXRlKCkge1xuICAgIHJldHVybiAhIUF0b21pY3MubG9hZCh0aGlzLiNpc0dyaWREaXNwbGF5ZWQsIDApXG4gICAgICA/IHRoaXMuI2dyaWRUbXBcbiAgICAgIDogdGhpcy4jZ3JpZDtcbiAgfVxuXG4gIGdyaWRUb0Rpc3BsYXkoKSB7XG4gICAgcmV0dXJuICEhQXRvbWljcy5sb2FkKHRoaXMuI2lzR3JpZERpc3BsYXllZCwgMClcbiAgICAgID8gdGhpcy4jZ3JpZFxuICAgICAgOiB0aGlzLiNncmlkVG1wO1xuICB9XG5cbiAgY2xlYXJHcmlkKGdyaWQpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuI2hlaWdodDsgaSsrKVxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLiN3aWR0aDsgaisrKVxuICAgICAgICB0aGlzLnNldENlbGwoZ3JpZCwgaSwgaiwgU2hhcmVkR3JpZC5ERUFEX0NFTEwpO1xuICB9XG5cbiAgZ2V0Q2VsbChncmlkLCBpLCBqKSB7XG4gICAgaWYgKCEoZ3JpZCBpbnN0YW5jZW9mIEludDhBcnJheSkpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBcIlNoYXJlZEdyaWQuZ2V0Q2VsbCByZXF1aXJlcyBJbnQ4QXJyYXkgYXMgZmlyc3QgYXJndW1lbnRcIlxuICAgICAgKTtcbiAgICBjb25zdCBtID0gaSA+PSB0aGlzLiNoZWlnaHQgPyAwIDogaSA8IDAgPyB0aGlzLiNoZWlnaHQgLSAxIDogaTtcbiAgICBjb25zdCBuID0gaiA+PSB0aGlzLiN3aWR0aCA/IDAgOiBqIDwgMCA/IHRoaXMuI3dpZHRoIC0gMSA6IGo7XG4gICAgcmV0dXJuIEF0b21pY3MubG9hZChncmlkLCBtICogdGhpcy4jd2lkdGggKyBuKTtcbiAgfVxuXG4gIHNldENlbGwoZ3JpZCwgaSwgaiwgdmFsdWUpIHtcbiAgICBpZiAoIShncmlkIGluc3RhbmNlb2YgSW50OEFycmF5KSlcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgIFwiU2hhcmVkR3JpZC5nZXRDZWxsIHJlcXVpcmVzIEludDhBcnJheSBhcyBmaXJzdCBhcmd1bWVudFwiXG4gICAgICApO1xuICAgIEF0b21pY3MuZXhjaGFuZ2UoZ3JpZCwgaSAqIHRoaXMuI3dpZHRoICsgaiwgdmFsdWUpO1xuICB9XG5cbiAgZ2V0Q29vcmRzKHgpIHtcbiAgICBpZiAoeCA8IHRoaXMuI3dpZHRoICogdGhpcy4jaGVpZ2h0KSB7XG4gICAgICBsZXQgaSA9IE1hdGguZmxvb3IoeCAvIHRoaXMuI3dpZHRoKTtcbiAgICAgIGxldCBqID0geCAtIGkgKiB0aGlzLiN3aWR0aDtcbiAgICAgIHJldHVybiBbaSwgal07XG4gICAgfVxuICAgIHJldHVybiBbMCwgMF07XG4gIH1cblxuICBnZXRBcnJheUNlbGwoZ3JpZCwgeCkge1xuICAgIHJldHVybiB0aGlzLmdldENlbGwoZ3JpZCwgLi4udGhpcy5nZXRDb29yZHMoeCkpO1xuICB9XG5cbiAgc2V0QXJyYXlDZWxsKGdyaWQsIHgsIHZhbHVlKSB7XG4gICAgdGhpcy5zZXRDZWxsKGdyaWQsIC4uLnRoaXMuZ2V0Q29vcmRzKHgpLCB2YWx1ZSk7XG4gIH1cblxuICBnZXROZWlnaGJvcnMoaSwgaikge1xuICAgIGNvbnN0IG5laWdoYm9ycyA9IFtdO1xuICAgIGZvciAobGV0IGEgPSAtMTsgYSA8IDI7IGErKylcbiAgICAgIGZvciAobGV0IGIgPSAtMTsgYiA8IDI7IGIrKylcbiAgICAgICAgbmVpZ2hib3JzLnB1c2godGhpcy5nZXRDZWxsKHRoaXMuZ3JpZFRvRGlzcGxheSgpLCBpICsgYSwgaiArIGIpKTtcbiAgICByZXR1cm4gbmVpZ2hib3JzO1xuICB9XG5cbiAgc2V0TmV4dEFycmF5Q2VsbFN0YXRlKHgpIHtcbiAgICB0aGlzLnNldE5leHRDZWxsU3RhdGUoLi4udGhpcy5nZXRDb29yZHMoeCkpO1xuICB9XG5cbiAgc2V0TmV4dENlbGxTdGF0ZShpLCBqKSB7XG4gICAgY29uc3QgY2VsbCA9IHRoaXMuZ2V0Q2VsbCh0aGlzLmdyaWRUb0Rpc3BsYXkoKSwgaSwgaik7XG4gICAgY29uc3QgbmVpZ2hib3JzID0gdGhpcy5nZXROZWlnaGJvcnMoaSwgaik7XG4gICAgbGV0IGFsaXZlID0gMDtcblxuICAgIG5laWdoYm9ycy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICBpZiAoYyA9PT0gU2hhcmVkR3JpZC5BTElWRV9DRUxMKSBhbGl2ZSsrO1xuICAgIH0pO1xuXG4gICAgY29uc3QgdmFsdWUgPVxuICAgICAgYWxpdmUgPT09IDNcbiAgICAgICAgPyBTaGFyZWRHcmlkLkFMSVZFX0NFTExcbiAgICAgICAgOiBjZWxsID09PSBTaGFyZWRHcmlkLkFMSVZFX0NFTEwgJiYgYWxpdmUgPT09IDJcbiAgICAgICAgPyBTaGFyZWRHcmlkLkFMSVZFX0NFTExcbiAgICAgICAgOiBTaGFyZWRHcmlkLkRFQURfQ0VMTDtcblxuICAgIHRoaXMuc2V0Q2VsbCh0aGlzLmdyaWRUb1dyaXRlKCksIGksIGosIHZhbHVlKTtcbiAgfVxufVxuIiwiaW1wb3J0IFF1ZXJ5YWJsZVdvcmtlciBmcm9tIFwiLi9RdWVyeWFibGVXb3JrZXJcIjtcbmltcG9ydCBTaGFyZWRHcmlkIGZyb20gXCIuL1NoYXJlZEdyaWRcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV29ya2VyTWFuYWdlciB7XG4gICN3b3JrZXJObyA9IHdpbmRvdy5uYXZpZ2F0b3IuaGFyZHdhcmVDb25jdXJyZW5jeSAtIDE7XG4gICN3b3JrZXJzID0gW107XG5cbiAgI3NoYXJlZEdyaWQ7XG4gICNpc0dyaWREaXNwbGF5ZWQ7IC8vIHNoYXJlZFxuXG4gIC8vIG1lbW9yeSBidWZmZXJzXG4gICNzaGFyZWRBcnJheUJ1ZmZlcjtcbiAgI3NoYXJlZEFycmF5QnVmZmVyVG1wO1xuICAjc2hhcmVkRGlzcGxheUZsYWc7XG5cbiAgY29uc3RydWN0b3IoaGVpZ2h0LCB3aWR0aCkge1xuICAgIHRoaXMuI3NoYXJlZEFycmF5QnVmZmVyID0gbmV3IFNoYXJlZEFycmF5QnVmZmVyKGhlaWdodCAqIHdpZHRoKTtcbiAgICB0aGlzLiNzaGFyZWRBcnJheUJ1ZmZlclRtcCA9IG5ldyBTaGFyZWRBcnJheUJ1ZmZlcihoZWlnaHQgKiB3aWR0aCk7XG4gICAgdGhpcy4jc2hhcmVkRGlzcGxheUZsYWcgPSBuZXcgU2hhcmVkQXJyYXlCdWZmZXIoMSk7XG5cbiAgICB0aGlzLiNzaGFyZWRHcmlkID0gbmV3IFNoYXJlZEdyaWQoKTtcbiAgICB0aGlzLiNzaGFyZWRHcmlkLmluaXRTaGFyZWRHcmlkKFxuICAgICAgdGhpcy4jc2hhcmVkQXJyYXlCdWZmZXIsXG4gICAgICB0aGlzLiNzaGFyZWRBcnJheUJ1ZmZlclRtcCxcbiAgICAgIHRoaXMuI3NoYXJlZERpc3BsYXlGbGFnLFxuICAgICAgaGVpZ2h0LFxuICAgICAgd2lkdGhcbiAgICApO1xuXG4gICAgdGhpcy4jaXNHcmlkRGlzcGxheWVkID0gbmV3IEludDhBcnJheSh0aGlzLiNzaGFyZWREaXNwbGF5RmxhZyk7XG4gICAgQXRvbWljcy5leGNoYW5nZSh0aGlzLiNpc0dyaWREaXNwbGF5ZWQsIDAsIDApO1xuICB9XG5cbiAgaW5pdFdlYldvcmtlcnMoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLiN3b3JrZXJObzsgaSsrKSB7XG4gICAgICB0aGlzLiN3b3JrZXJzLnB1c2gobmV3IFF1ZXJ5YWJsZVdvcmtlcigpKTtcbiAgICAgIHRoaXMuI3dvcmtlcnNbaV0uYWRkTGlzdGVuZXIoXCJwcmludFN0dWZmXCIsIChtZXNzYWdlKSA9PlxuICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKVxuICAgICAgKTtcbiAgICAgIHRoaXMuI3dvcmtlcnNbaV0uc2VuZFF1ZXJ5KFxuICAgICAgICBcImluaXRTaGFyZWRHcmlkXCIsXG4gICAgICAgIHRoaXMuI3NoYXJlZEFycmF5QnVmZmVyLFxuICAgICAgICB0aGlzLiNzaGFyZWRBcnJheUJ1ZmZlclRtcCxcbiAgICAgICAgdGhpcy4jc2hhcmVkRGlzcGxheUZsYWcsXG4gICAgICAgIHRoaXMuI3NoYXJlZEdyaWQuaGVpZ2h0LFxuICAgICAgICB0aGlzLiNzaGFyZWRHcmlkLndpZHRoXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHNjYXR0ZXJRdWVyeShxdWVyeU1ldGhvZCwgLi4ucXVlcnlBcmd1bWVudHMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuI3dvcmtlck5vOyBpKyspXG4gICAgICB0aGlzLiN3b3JrZXJzW2ldLnNlbmRRdWVyeShxdWVyeU1ldGhvZCwgLi4ucXVlcnlBcmd1bWVudHMpO1xuICB9XG5cbiAgZ2V0Q2VsbFRvRGlzcGxheShpLCBqKSB7XG4gICAgcmV0dXJuIHRoaXMuI3NoYXJlZEdyaWQuZ2V0Q2VsbCh0aGlzLiNzaGFyZWRHcmlkLmdyaWRUb0Rpc3BsYXkoKSwgaSwgaik7XG4gIH1cblxuICB0b2dnbGVDZWxsVG9EaXNwbGF5KGksIGopIHtcbiAgICBjb25zdCBncmlkVG9EaXNwbGF5ID0gdGhpcy4jc2hhcmVkR3JpZC5ncmlkVG9EaXNwbGF5KCk7XG4gICAgdGhpcy4jc2hhcmVkR3JpZC5zZXRDZWxsKFxuICAgICAgZ3JpZFRvRGlzcGxheSxcbiAgICAgIGksXG4gICAgICBqLFxuICAgICAgdGhpcy4jc2hhcmVkR3JpZC5nZXRDZWxsKGdyaWRUb0Rpc3BsYXksIGksIGopID09PSBTaGFyZWRHcmlkLkRFQURfQ0VMTFxuICAgICAgICA/IFNoYXJlZEdyaWQuQUxJVkVfQ0VMTFxuICAgICAgICA6IFNoYXJlZEdyaWQuREVBRF9DRUxMXG4gICAgKTtcbiAgfVxuXG4gICN0b2dnbGVEaXNwbGF5RmxhZygpIHtcbiAgICBjb25zdCBmbGFnID0gQXRvbWljcy5sb2FkKHRoaXMuI2lzR3JpZERpc3BsYXllZCwgMCk7XG4gICAgQXRvbWljcy5leGNoYW5nZSh0aGlzLiNpc0dyaWREaXNwbGF5ZWQsIDAsICEhZmxhZyA/IDAgOiAxKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FudmFzIHtcbiAgc3RhdGljIERFQURfQ0VMTF9GSUxMID0gXCJ3aGl0ZVwiO1xuICBzdGF0aWMgQUxJVkVfQ0VMTF9GSUxMID0gXCJibGFja1wiO1xuICBzdGF0aWMgI0hPVkVSX0ZJTEwgPSBcImdyYXlcIjtcbiAgc3RhdGljICNMSU5FX1dJRFRIID0gXCIxXCI7XG5cbiAgI2NhbnZhcztcbiAgI2N0eDtcblxuICAjZ3JpZEhlaWdodDtcbiAgI2dyaWRXaWR0aDtcbiAgI2NlbGxTaXplO1xuXG4gIGNvbnN0cnVjdG9yKHF1ZXJ5U3RyaW5nLCBncmlkSGVpZ2h0LCBncmlkV2lkdGgpIHtcbiAgICB0aGlzLiNjYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHF1ZXJ5U3RyaW5nKTtcbiAgICB0aGlzLiNjdHggPSB0aGlzLiNjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIHRoaXMuc2V0R3JpZChncmlkSGVpZ2h0LCBncmlkV2lkdGgpO1xuICB9XG5cbiAgZ2V0IGNhbnZhcygpIHtcbiAgICByZXR1cm4gdGhpcy4jY2FudmFzO1xuICB9XG5cbiAgZ2V0UGFyZW50V2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2NhbnZhcy5wYXJlbnRFbGVtZW50LnNjcm9sbFdpZHRoO1xuICB9XG5cbiAgc2V0R3JpZChncmlkSGVpZ2h0LCBncmlkV2lkdGgpIHtcbiAgICB0aGlzLiNncmlkSGVpZ2h0ID0gZ3JpZEhlaWdodDtcbiAgICB0aGlzLiNncmlkV2lkdGggPSBncmlkV2lkdGg7XG4gICAgdGhpcy5zZXRTaXplKCk7XG4gIH1cblxuICBnZXRIZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2NhbnZhcy5zY3JvbGxIZWlnaHQ7XG4gIH1cblxuICBnZXRXaWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy4jY2FudmFzLnNjcm9sbFdpZHRoO1xuICB9XG5cbiAgc2V0U2l6ZSgpIHtcbiAgICB0aGlzLiNjZWxsU2l6ZSA9IHRoaXMuZ2V0UGFyZW50V2lkdGgoKSAvIHRoaXMuI2dyaWRXaWR0aDtcbiAgICB0aGlzLiNjYW52YXMud2lkdGggPSB0aGlzLmdldFBhcmVudFdpZHRoKCk7XG4gICAgdGhpcy4jY2FudmFzLmhlaWdodCA9IHRoaXMuI2NlbGxTaXplICogdGhpcy4jZ3JpZEhlaWdodDtcbiAgfVxuXG4gIGNlbGxUb0NvcmRzKGksIGopIHtcbiAgICByZXR1cm4gW2ogKiB0aGlzLiNjZWxsU2l6ZSwgaSAqIHRoaXMuI2NlbGxTaXplXTtcbiAgfVxuXG4gIGNvcmRzVG9DZWxsKHgsIHkpIHtcbiAgICByZXR1cm4gW01hdGguZmxvb3IoeSAvIHRoaXMuI2NlbGxTaXplKSwgTWF0aC5mbG9vcih4IC8gdGhpcy4jY2VsbFNpemUpXTtcbiAgfVxuXG4gIGRyYXdDZWxsKGksIGopIHtcbiAgICB0aGlzLiNjdHguYmVnaW5QYXRoKCk7XG4gICAgdGhpcy4jY3R4LmxpbmVXaWR0aCA9IENhbnZhcy4jTElORV9XSURUSDtcbiAgICB0aGlzLiNjdHgucmVjdCguLi50aGlzLmNlbGxUb0NvcmRzKGksIGopLCB0aGlzLiNjZWxsU2l6ZSwgdGhpcy4jY2VsbFNpemUpO1xuICAgIHRoaXMuI2N0eC5zdHJva2UoKTtcbiAgfVxuXG4gIGRyYXdHcmlkKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy4jZ3JpZEhlaWdodDsgaSsrKVxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLiNncmlkV2lkdGg7IGorKykgdGhpcy5kcmF3Q2VsbChpLCBqKTtcbiAgfVxuXG4gIGZpbGxDZWxsKGksIGosIGZpbGwgPSBDYW52YXMuQUxJVkVfQ0VMTF9GSUxMKSB7XG4gICAgdGhpcy4jY3R4LmZpbGxTdHlsZSA9IGZpbGw7XG4gICAgdGhpcy4jY3R4LmZpbGxSZWN0KFxuICAgICAgLi4udGhpcy5jZWxsVG9Db3JkcyhpLCBqKSxcbiAgICAgIHRoaXMuI2NlbGxTaXplLFxuICAgICAgdGhpcy4jY2VsbFNpemVcbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgXCIuL3N0eWxlcy9pbmRleC5zY3NzXCI7XG5pbXBvcnQgXCIuL3N0eWxlcy9yZXNldC5jc3NcIjtcblxuaW1wb3J0IHsgV29ya2VyTWFuYWdlciwgQ2FudmFzLCBTaGFyZWRHcmlkIH0gZnJvbSBcIi4vbW9kdWxlc1wiO1xuXG5jb25zdCBncmlkSGVpZ2h0ID0gODtcbmNvbnN0IGdyaWRXaWR0aCA9IDEwO1xuXG5jb25zdCBjYW52YXMgPSBuZXcgQ2FudmFzKFwiI2NhbnZhc1wiLCBncmlkSGVpZ2h0LCBncmlkV2lkdGgpO1xuY29uc3Qgd29ya2VyTWFuYWdlciA9IG5ldyBXb3JrZXJNYW5hZ2VyKGdyaWRIZWlnaHQsIGdyaWRXaWR0aCk7XG53b3JrZXJNYW5hZ2VyLmluaXRXZWJXb3JrZXJzKCk7XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsICgpID0+IHtcbiAgY2FudmFzLnNldFNpemUoKTtcbiAgcmVuZGVyKCk7XG59KTtcblxuY29uc3QgcmVuZGVyID0gKCkgPT4ge1xuICBjYW52YXMuZHJhd0dyaWQoKTtcbn07XG5yZW5kZXIoKTtcblxuY2FudmFzLmNhbnZhcy5vbm1vdXNlZG93biA9ICh7IG9mZnNldFgsIG9mZnNldFkgfSkgPT4ge1xuICBjb25zdCBjb3JkcyA9IGNhbnZhcy5jb3Jkc1RvQ2VsbChvZmZzZXRYLCBvZmZzZXRZKTtcbiAgY29uc3QgY2VsbCA9IHdvcmtlck1hbmFnZXIuZ2V0Q2VsbFRvRGlzcGxheSguLi5jb3Jkcyk7XG4gIGNvbnNvbGUubG9nKGNlbGwpO1xuICBjYW52YXMuZmlsbENlbGwoXG4gICAgLi4uY29yZHMsXG4gICAgY2VsbCA9PT0gU2hhcmVkR3JpZC5ERUFEX0NFTExcbiAgICAgID8gQ2FudmFzLkFMSVZFX0NFTExfRklMTFxuICAgICAgOiBDYW52YXMuREVBRF9DRUxMX0ZJTExcbiAgKTtcbiAgd29ya2VyTWFuYWdlci50b2dnbGVDZWxsVG9EaXNwbGF5KC4uLmNvcmRzKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9